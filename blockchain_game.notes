===BLOCKCHAIN GAME NOTES===
---------------------------

#NOTES
------
- Scope of the project is how to build a game and use tokens, not to build from scratch

- use...

     git push starter-code master

     ...to push to remote 


#DEVELOPMENT STEPS
------------------
- Declared name of contract as a string and state var
- Added contract to 2_deploy_contract.js
- Open truffle Quick Start
- Migrate your contract to the local ethereum blockchain
    truffle migrate --reset
- Open truffle console to interact with contract with JS
    truffle console
- Start developing code and testing code at the same time
  . We wrote the constructor with the variable value names ("Memory Token", "MEMORY")
  . We wrote our deployment test - describe('deployment')
    + Then we tested wether it was on the blockchain
  . We wrote our token mint test - describe('token distribution') 
    + We used our own mint() function that overrode the ERC721Full.sol mint() function
      - So that we could have custom test?
- Connect Browser to Blockchain Using Web3 Provider (MetaMask)
  . Made sure our client was running
  . Made sure truffle blockchain was running
  . Send new copy to local blockchain via migrate --reset
  . Ensured MetaMask was connected (browser connected to blockchain)
- Connect Dapp to Blockchain Using Web3.js 
  . loadWeb3() function with window.ethereum
  . Call loadWeb3() in your app.js
  . Display connected address in UI
- Connect (Fetch) the smart contract to the Dapp
  . Import artifact
  . loadBlockchainData() function
    + We created a JS version of our contract with (1) ABI (2) address
    + Fetch the abi
    + Find the address on that network
    + Create the JS version of your contract
    + setState()
    + Add it to the State object
    â†‘ This concludes the fetching of the smart contract






===BLOCKCHAIN GAME TECHNOLOGY===
--------------------------------


#DIRECTIONS

- Cloning 
  . git clone -b starter-code https://github.com/dappuniversity/blockchain_game.git blockchain_game


#SERVER START

  npm run start



#LOGINS & PASSWORDS


*Clientside*

*Serverside*




#FULLSTACK


*Languages*

*Frameworks*

  *Testing Frameworks*

  *Theming Frameworks*

*Libraries*

*Template Engines*




#FRONTEND


*Languages*

*Frameworks*

  *Testing Frameworks*

  *Theming Frameworks*
   - Bootstrap

*Libraries*
 - React

*Template Engines*


#BACKEND

*Languages*

*Frameworks*

  *Testing Frameworks*
  - Truffle
  - Ganache

*Libraries*
 - web3.js

*Template Engines*


#BLOCKCHAIN


*webThree Provider*
 - MetaMask

*Node API Provider*


*Testnets*




#OTHER


*Tools*


*Dependencies*



















